// <auto-generated />
using System;
using DevMailCenter.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DevMailCenter.Core.Migrations
{
    [DbContext(typeof(DmcContext))]
    [Migration("20241214125950_addAttachmentsToEmail")]
    partial class addAttachmentsToEmail
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DevMailCenter.Models.Email", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("EmailId");

                    b.Property<DateTime?>("Completed")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("EmailCompleted");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2024, 12, 14, 12, 59, 49, 919, DateTimeKind.Utc).AddTicks(7691))
                        .HasColumnName("EmailCreated");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("EmailMessage");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("EmailModified");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("EmailPriority");

                    b.Property<DateTime?>("SendRequested")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("EmailSendRequested");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("EmailServerSettingsServerId");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("EmailStatus");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("EmailSubject");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ServerId");

                    b.ToTable("DmcEmail", (string)null);
                });

            modelBuilder.Entity("DevMailCenter.Models.EmailAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EmailId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Mime")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("EmailId");

                    b.ToTable("EmailAttachment");
                });

            modelBuilder.Entity("DevMailCenter.Models.EmailReceiver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("EmailReceiverId");

                    b.Property<Guid>("EmailId")
                        .HasColumnType("char(36)")
                        .HasColumnName("EmailReceiverEmailId");

                    b.Property<string>("ReceiverEmail")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("EmailReceiverReceiverEmail");

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("EmailReceiverType");

                    b.HasKey("Id");

                    b.HasIndex("EmailId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("DmcEmailReceiver", (string)null);
                });

            modelBuilder.Entity("DevMailCenter.Models.EmailTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("EmailTransactionId");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2024, 12, 14, 12, 59, 49, 920, DateTimeKind.Utc).AddTicks(610))
                        .HasColumnName("EmailTransactionCreated");

                    b.Property<Guid>("EmailId")
                        .HasColumnType("char(36)")
                        .HasColumnName("EmailTransactionEmailId");

                    b.Property<string>("RawResponse")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("EmailTransactionRawResponse");

                    b.HasKey("Id");

                    b.HasIndex("EmailId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("DmcEmailTransaction", (string)null);
                });

            modelBuilder.Entity("DevMailCenter.Models.MailServer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ServerId");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("ServerActive");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2024, 12, 14, 12, 59, 49, 919, DateTimeKind.Utc).AddTicks(2741))
                        .HasColumnName("ServerCreated");

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ServerLastUsed");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ServerModified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ServerName");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("ServerType");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("DmcMailServer", (string)null);
                });

            modelBuilder.Entity("DevMailCenter.Models.MailServerSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("MailServerSettingsId");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2024, 12, 14, 12, 59, 49, 919, DateTimeKind.Utc).AddTicks(6552))
                        .HasColumnName("MailServerSettingsCreated");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("MailServerSettingsKey");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("MailServerSettingsModified");

                    b.Property<bool>("Secret")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("MailServerSettingsSecret");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("MailServerSettingsServerId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("MailServerSettingsValue");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ServerId");

                    b.ToTable("DmcMailServerSettings", (string)null);
                });

            modelBuilder.Entity("DevMailCenter.Models.Email", b =>
                {
                    b.HasOne("DevMailCenter.Models.MailServer", null)
                        .WithMany("Emails")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevMailCenter.Models.EmailAttachment", b =>
                {
                    b.HasOne("DevMailCenter.Models.Email", null)
                        .WithMany("Attachments")
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevMailCenter.Models.EmailReceiver", b =>
                {
                    b.HasOne("DevMailCenter.Models.Email", null)
                        .WithMany("Receivers")
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevMailCenter.Models.EmailTransaction", b =>
                {
                    b.HasOne("DevMailCenter.Models.Email", null)
                        .WithMany("Transactions")
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevMailCenter.Models.MailServerSettings", b =>
                {
                    b.HasOne("DevMailCenter.Models.MailServer", null)
                        .WithMany("MailServerSettings")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevMailCenter.Models.Email", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Receivers");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("DevMailCenter.Models.MailServer", b =>
                {
                    b.Navigation("Emails");

                    b.Navigation("MailServerSettings");
                });
#pragma warning restore 612, 618
        }
    }
}
